_  = function(p) return p; end;
name = _('3 Screen');
Description = 'Configuration with 3 identical monitors each with its own camera'
Viewports = 
{
     Left = 
     {
          x = 0;
          y = 0;
          width = screen.width / 3;
          height = screen.height;
          viewDx = -1;
          viewDy = 0;
          aspect = screen.aspect / 3;
     },

     Center = 
     {
          x = screen.width / 3;
          y = 0;
          width = screen.width / 3;
          height = screen.height;
          viewDx = 0;
          viewDy = 0;
          aspect = screen.aspect / 3;
     },

     Right = 
     {
          x = screen.width * 2 / 3;
          y = 0;
          width = screen.width / 3;
          height = screen.height;
          viewDx = 1;
          viewDy = 0;
          aspect = screen.aspect / 3;
     }
}


UIMainView = Viewports.Center
GU_MAIN_VIEWPORT = Viewports.Center

--[[
also you can use "displays" table  to perfectly match you configuration .
it is generated by DCS automatically.
displays table is contains information about all currently attached displays 

for example my setup is :

displays = 
{
	[1] = 
	{
		x = 0,   -- note : x == 0 and y == 0 is always mark primary windows display 
		y = 0,
		width  = 1920,
		height = 1200
	},
	[2] = 
	{
		x = -1440,   -- mark that secondary display is on left side of primary display
		y = 0,
		width  = 1440,
		height = 900
	},
	...  for all displays 
}

screen table also contain x, y members which mark top left corner of DCS window 

note about fullscreen :  directx  doesn't allow fullscreen applications with resolutions more than primary display can handle,
so multimonitor presets in DCS will fall back to windowed mode if fullscreen initialization failed  ( this info also will be printed to dcs.log)

for reconfigure viewports setup for each unit type independently you can declare here function 

function  reconfigure_for_unit(unit_type)   --unit type is string with unit name
	if unit_type == "A-10C" then
          
		Viewports  = ... define new Viewports table 
		-- also you can define cockpit displays viewports here 
		RIGHT_MFCD = ... define new RIGHT_MFCD  viewport 
		  
	else 
	    Viewports = ... define default for others 
		RIGHT_MFCD = nil  -- remove for others 
	end
end

--]]