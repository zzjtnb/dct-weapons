package.path = package.path .. ';'
	.. './Scripts/?.lua;'
	.. './LuaSerializer/?.lua;'
    .. './MissionEditor/modules/?.lua;'

local optionsEditor 	= require('optionsEditor')


function getPermissionToCollectStatistics()
    return optionsEditor.getOption("miscellaneous.collect_stat")
end 

function getAutoLogin()
    return optionsEditor.getOption("miscellaneous.autologin")
end

function setAutoLogin(a_autologin)
    optionsEditor.setOption("miscellaneous.autologin", a_autologin)
end

function env_dofile(env, f)
    local c, err = loadfile(f)
    if not c then
        log.error(err)
        return nil, err
    end
    setfenv(c, env)
    local res, err = pcall(c)
    if not res then
        log.error(err)
        return nil, err
    end
    return true
end

-- update graphics options (effects, water, shadows, postEffects, etc.) in globalConfig via GUI
function updateGraphicsOptions()
	local ref = {}
	env_dofile(ref, ConfigHelper.getConfigReadPath('options.lua'))
	if ref.options.graphics ~= nil then
		for key,value in pairs(ref.options.graphics) do
			options.graphics[key] = value
		end
	end
        --if visibleRange was changes terrain options have to be reloaded to.
        dofile('Config/terrain.lua')
end

local config_dir = lfs.writedir() .. "Config/"
if not lfs.attributes(config_dir, 'mode') then
    lfs.mkdir(config_dir)
end

function safeDoFileWithRequire(filename)
    local f,err = loadfile(filename)
    if not f then
        print("ERROR: safeDoFileWithRequire() file not found!", err)
        return { }
    end
    local env = {require = require,
                table = table, 
                pairs = pairs,
				ipairs = ipairs,
                print = print
                }
    setfenv(f, env)
    f()
    return env
end

safeDoFileWithRequire('Scripts/UserFiles.lua')

ConfigHelper = require('ConfigHelper')

input = {}
net = {}
sound = {}

function reloadOptions()
  local opts_file = ConfigHelper.getConfigReadPath('options.lua') 
  local ref = {}
  if env_dofile(ref,opts_file) then 
     options = ref.options
  else
	 options = {}
  end

  if not options.format then
    options.sound = {} -- reset old sound options
  end
  -- process sound options
  dofile('Config/sound.lua')

  -- set up graphic options
  local _graphics = {}
  env_dofile(_graphics, 'Config/graphics.lua')
  if not options.graphics then options.graphics = {} end
  setmetatable(options.graphics, { __index = _graphics })

  dofile('Config/netview.lua')
  dofile('Config/terrain.lua')

  local autoexec_cfg = config_dir .. 'autoexec.cfg'
  if lfs.attributes(autoexec_cfg, 'mode') then
    dofile(autoexec_cfg)
  end

  local Camera = options.graphics.Camera
  
  Camera.Current = Camera[visibRange] or Camera["Medium"]
end


startProfiler = false
guiDebugDraw = false
show_debug_output_console	= false

reloadOptions()

-------------------------------------------------------------------------------
--serialization
function value2string(val)
    local t = type(val)
    if t == "number" or t == "boolean" then
        return tostring(val)
    elseif t == "table" then
        local str = ''
        local k,v
        for k,v in pairs(val) do
            str = str ..'['..value2string(k)..']='..value2string(v)..','
        end
        return '{'..str..'}'
    else
        return string.format("%q", tostring(val))
    end
end

function value2code(val)
    return 'return ' .. value2string(val)
end

